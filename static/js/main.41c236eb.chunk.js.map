{"version":3,"sources":["redux/todos/todos-actions.js","redux/todos/todos-operations.js","redux/todos/todos-selectors.js","redux/todos/todos-reducer.js","components/Todos/TodoStats.jsx","components/Todos/TodoItem.jsx","components/Todos/TodoList.jsx","components/Todos/TodoList.container.js","components/Todos/TodoEditor.jsx","components/Todos/TodoFilter.jsx","components/Modal/Modal.jsx","components/Todos/Todos.jsx","App.js","redux/store.js","index.js"],"names":["fetchTodosRequest","createAction","fetchTodosSuccess","fetchTodosError","addTodoRequest","addTodoSuccess","addTodoError","deleteTodoRequest","deleteTodoSuccess","deleteTodoError","toggleCompletedRequest","toggleCompletedSuccess","toggleCompletedError","changeFilter","axios","defaults","baseURL","fetchTodos","dispatch","a","get","data","addTodo","text","todo","completed","post","deleteTodo","id","delete","toggleCompleted","update","patch","getFilter","state","todos","filter","getAllTodos","items","getCompletedTodoCount","createSelector","console","log","reduce","total","getVisibleTodos","normalizedFilter","toLowerCase","includes","getLoading","loading","getTotalTodoCount","length","createReducer","_","payload","map","combineReducers","connect","todosSelectors","TodoItem","onToggleCompleted","onDelete","Checkbox","type","className","checked","onChange","color","inputProps","IconButton","onClick","disabled","aria-label","component","TodoList","onDeleteTodo","classNames","todosOperations","TodoEditor","message","handleChange","e","setState","currentTarget","value","handleSubmit","preventDefault","props","onSubmit","onCloseModal","alert","window","addEventListener","this","handleKeyDown","removeEventListener","TextField","label","multiline","rows","variant","Button","Component","target","reusedModalRoot","document","querySelector","Modal","code","onClose","handleBackdropClick","createPortal","children","Todos","showModal","toggleModal","isLoadingTodos","shortid","generate","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","todosReducer","devTools","process","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.41c236eb.chunk.js","sourcesContent":["// import axios from 'axios';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const fetchTodosRequest = createAction('todos/fetchTodosRequest');\nexport const fetchTodosSuccess = createAction('todos/fetchTodosSuccess');\nexport const fetchTodosError = createAction('todo/fetchTodosError');\n\nexport const addTodoRequest = createAction('todos/addTodoRequest');\nexport const addTodoSuccess = createAction('todos/addTodoSuccess');\nexport const addTodoError = createAction('todo/addTodoError');\n\nexport const deleteTodoRequest = createAction('todos/deleteTodoRequest');\nexport const deleteTodoSuccess = createAction('todos/deleteTodoSuccess');\nexport const deleteTodoError = createAction('todo/deleteTodoError');\n\nexport const toggleCompletedRequest = createAction(\n  'todos/toggleCompletedRequest',\n);\nexport const toggleCompletedSuccess = createAction(\n  'todos/toggleCompletedSuccess',\n);\nexport const toggleCompletedError = createAction('todo/toggleCompletedError');\n\nexport const deleteTodo = createAction('todos/delete');\nexport const changeFilter = createAction('todos/changeFilter');\nexport const toggleCompleted = createAction('todos/toggleCompleted');\n\n/* eslint-disable */\n// export default {\n// addTodoRequest,\n// addTodoSuccess,\n// addTodoError,\n// addTodo,\n// deleteTodo,\n// changeFilter,\n// toggleCompleted,\n// };\n\n/* ================================================\n// ** Sync (completed module)\n\nimport shortid from 'shortid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addTodo = createAction('todos/add', text => ({\n  payload: {\n    id: shortid.generate(),\n    text,\n    completed: false,\n  },\n}));\nconst deleteTodo = createAction('todos/delete');\nconst changeFilter = createAction('todos/changeFilter');\nconst toggleCompleted = createAction('todos/toggleCompleted');\n\nexport default { addTodo, deleteTodo, changeFilter, toggleCompleted }; // eslint-disable-line\n\n// ------------------------------------------------- */\n","import axios from 'axios';\nimport {\n  fetchTodosRequest,\n  fetchTodosSuccess,\n  fetchTodosError,\n  addTodoRequest,\n  addTodoSuccess,\n  addTodoError,\n  deleteTodoRequest,\n  deleteTodoSuccess,\n  deleteTodoError,\n  toggleCompletedRequest,\n  toggleCompletedSuccess,\n  toggleCompletedError,\n} from './todos-actions';\n\naxios.defaults.baseURL = 'http://localhost:2222';\n\n// Fetch Todos\nconst fetchTodos = async dispatch => {\n  dispatch(fetchTodosRequest());\n\n  try {\n    const { data } = await axios.get('/todos');\n    dispatch(fetchTodosSuccess(data));\n  } catch (error) {\n    dispatch(fetchTodosError(error));\n  }\n};\n\n// Add Todo\nconst addTodo = text => async dispatch => {\n  const todo = {\n    text,\n    completed: false,\n  };\n\n  dispatch(addTodoRequest());\n\n  try {\n    const { data } = await axios.post('/todos', todo);\n    dispatch(addTodoSuccess(data));\n  } catch (error) {\n    dispatch(addTodoError(error));\n  }\n};\n\n// Delete Todo\nconst deleteTodo = id => async dispatch => {\n  dispatch(deleteTodoRequest());\n\n  try {\n    await axios.delete(`/todos/${id}`);\n    dispatch(deleteTodoSuccess(id));\n  } catch (error) {\n    dispatch(deleteTodoError(error));\n  }\n};\n\n// Toggle Completed\nconst toggleCompleted = ({ id, completed }) => async dispatch => {\n  const update = { completed };\n\n  dispatch(toggleCompletedRequest());\n\n  try {\n    const { data } = await axios.patch(`/todos/${id}`, update);\n    dispatch(toggleCompletedSuccess(data));\n  } catch (error) {\n    toggleCompletedError(error);\n  }\n};\n\n/* eslint-disable */\nexport default { fetchTodos, addTodo, deleteTodo, toggleCompleted };\n\n/* ===============================================\n// ** Async axios\n\nimport axios from 'axios';\nimport {\n  fetchTodosRequest,\n  fetchTodosSuccess,\n  fetchTodosError,\n  addTodoRequest,\n  addTodoSuccess,\n  addTodoError,\n  deleteTodoRequest,\n  deleteTodoSuccess,\n  deleteTodoError,\n  toggleCompletedRequest,\n  toggleCompletedSuccess,\n  toggleCompletedError,\n} from './todos-actions';\n\naxios.defaults.baseURL = 'http://localhost:2222';\n\n// Fetch Todos\nconst fetchTodos = dispatch => {\n  dispatch(fetchTodosRequest());\n\n  axios\n    .get('/todos')\n    .then(({ data }) => dispatch(fetchTodosSuccess(data)))\n    .catch(error => dispatch(fetchTodosError(error)));\n};\n\n// Add Todo\nconst addTodo = text => dispatch => {\n  const todo = {\n    text,\n    completed: false,\n  };\n\n  // Start (sync)\n  dispatch(addTodoRequest());\n\n  axios\n    .post('/todos', todo)\n    .then(({ data }) => dispatch(addTodoSuccess(data)))\n    .catch(error => dispatch(addTodoError(error)));\n};\n\n// Delete Todo\nconst deleteTodo = todoId => dispatch => {\n  dispatch(deleteTodoRequest());\n\n  axios\n    .delete(`/todos/${todoId}`)\n    .then(() => dispatch(deleteTodoSuccess(todoId)))\n    .catch(error => dispatch(deleteTodoError(error)));\n};\n\n// Toggle Completed\nconst toggleCompleted = ({ id, completed }) => dispatch => {\n  const update = { completed };\n\n  dispatch(toggleCompletedRequest());\n\n  axios\n    .patch(`/todos/${id}`, update)\n    .then(({ data }) => dispatch(toggleCompletedSuccess(data)))\n    .catch(error => dispatch(toggleCompletedError(error)));\n};\n\nexport default { fetchTodos, addTodo, deleteTodo, toggleCompleted };\n----------------------------------------------- */\n","import { createSelector } from '@reduxjs/toolkit';\n\n// Простые селекторы\nconst getLoading = state => state.todos.loading;\nconst getFilter = state => state.todos.filter;\nconst getAllTodos = state => state.todos.items;\n\n// Составные селекторы (композитные)\nconst getTotalTodoCount = state => {\n  const todos = getAllTodos(state);\n\n  return todos.length;\n};\n\nconst getCompletedTodoCount = createSelector([getAllTodos], todos => {\n  console.log('Высчитывает новое кол-во Completed Todos ');\n  return todos.reduce((total, todo) => (todo.completed ? total + 1 : total), 0);\n});\n\nconst getVisibleTodos = createSelector(\n  [getAllTodos, getFilter],\n  (todos, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    console.log('Составлят новый массив видимых Todos');\n    return todos.filter(({ text }) =>\n      text.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\n/* eslint-disable */\nexport default {\n  getLoading,\n  getFilter,\n  getAllTodos,\n  getTotalTodoCount,\n  getCompletedTodoCount,\n  getVisibleTodos,\n};\n\n/* ==============================================\n// ** Before memoization \n    \n// Составные селекторы (композитные)\n\nconst getCompletedTodosCount = state => {\n  const todos = getAllTodos(state);\n\n  return todos.reduce((total, todo) => (todo.completed ? total + 1 : total), 0);\n};\n\nconst getVisibleTodos = state => {\n  const todos = getAllTodos(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return todos.filter(({ text }) =>\n    text.toLowerCase().includes(normalizedFilter),\n  );\n};\n\n---------------------------------------------- */\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n// import actions from './todos-actions';\nimport {\n  fetchTodosRequest,\n  fetchTodosSuccess,\n  fetchTodosError,\n  addTodoRequest,\n  addTodoSuccess,\n  addTodoError,\n  deleteTodoRequest,\n  deleteTodoSuccess,\n  deleteTodoError,\n  changeFilter,\n  toggleCompletedRequest,\n  toggleCompletedSuccess,\n  toggleCompletedError,\n} from './todos-actions';\n\n// Items\nconst items = createReducer([], {\n  [fetchTodosSuccess]: (_, { payload }) => payload,\n  [addTodoSuccess]: (state, { payload }) => [payload, ...state],\n  [deleteTodoSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n  [toggleCompletedSuccess]: (state, { payload }) =>\n    state.map(todo => (todo.id === payload.id ? payload : todo)),\n});\n\n// Loading\nconst loading = createReducer(false, {\n  [fetchTodosRequest]: () => true,\n  [fetchTodosSuccess]: () => false,\n  [fetchTodosError]: () => false,\n  [addTodoRequest]: () => true,\n  [addTodoSuccess]: () => false,\n  [addTodoError]: () => false,\n  [deleteTodoRequest]: () => true,\n  [deleteTodoSuccess]: () => false,\n  [deleteTodoError]: () => false,\n  [toggleCompletedRequest]: () => true,\n  [toggleCompletedSuccess]: () => false,\n  [toggleCompletedError]: () => false,\n});\n\n// Filter\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({ items, filter, loading });\n\n/* ================================================\n// ** Sync (completed module)\n\nimport { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './todos-actions';\n\nconst items = createReducer([], {\n  [actions.addTodo]: (state, { payload }) => [...state, payload],\n  [actions.toggleCompleted]: (state, { payload }) =>\n    state.map(todo =>\n      todo.id === payload ? { ...todo, completed: !todo.completed } : todo,\n    ),\n  [actions.deleteTodo]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({ items, filter });\n\n// ------------------------------------------------- */\n","import { connect } from 'react-redux';\nimport { todosSelectors } from '../../redux/todos';\n\nconst Stats = ({ total, completed }) => {\n  return (\n    <div>\n      <p>\n        <span>Total: {total}</span>\n      </p>\n      <p>\n        <span>Completed: {completed}</span>\n      </p>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  total: todosSelectors.getTotalTodoCount(state),\n  completed: todosSelectors.getCompletedTodoCount(state),\n});\n\nexport default connect(mapStateToProps)(Stats);\n","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport DeleteTwoToneIcon from '@material-ui/icons/DeleteTwoTone';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport './TodosStyles.scss';\n\nconst TodoItem = ({ text, completed, onToggleCompleted, onDelete }) => {\n  return (\n    <>\n      <label>\n        <Checkbox\n          type=\"checkbox\"\n          className=\"TodoList__checkbox\"\n          checked={completed}\n          onChange={onToggleCompleted}\n          color=\"primary\"\n          inputProps={{ 'aria-label': 'secondary checkbox' }}\n        />\n      </label>\n      <p className=\"TodoList__text\">{text}</p>\n      <IconButton\n        type=\"button\"\n        className=\"TodoList__btn\"\n        onClick={onDelete}\n        disabled={!completed}\n        color=\"primary\"\n        aria-label=\"delete todo\"\n        component=\"span\"\n      >\n        <DeleteTwoToneIcon />\n      </IconButton>\n    </>\n  );\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport classNames from 'classnames';\nimport TodoItem from './TodoItem';\nimport './TodosStyles.scss';\n\nconst TodoList = ({ todos, onDeleteTodo, onToggleCompleted }) => {\n  return (\n    <ul className=\"TodoList\">\n      {todos.map(({ id, text, completed }) => {\n        return (\n          <li\n            key={id}\n            className={classNames('TodoList__item', {\n              'TodoList__item--completed': completed,\n            })}\n          >\n            <TodoItem\n              text={text}\n              completed={completed}\n              onToggleCompleted={() =>\n                onToggleCompleted({ id, completed: !completed })\n              }\n              onDelete={() => onDeleteTodo(id)}\n            />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default TodoList;\n","import { connect } from 'react-redux';\nimport { todosOperations, todosSelectors } from '../../redux/todos';\nimport TodoList from './TodoList';\n\nconst mapStateToProps = state => ({\n  todos: todosSelectors.getVisibleTodos(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteTodo: id => dispatch(todosOperations.deleteTodo(id)),\n  onToggleCompleted: id => dispatch(todosOperations.toggleCompleted(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport todosOperations from '../../redux/todos/todos-operations';\nimport { Button, TextField } from '@material-ui/core';\n\nclass TodoEditor extends Component {\n  state = {\n    message: '',\n  };\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  handleChange = e => {\n    this.setState({ message: e.currentTarget.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    if (this.state.message !== '') {\n      this.props.onSubmit(this.state.message);\n      this.props.onCloseModal();\n      this.setState({ message: '' });\n      return;\n    }\n\n    alert('Заполни текст Todo');\n  };\n\n  render() {\n    return (\n      <form className=\"TodoEditor\" onSubmit={this.handleSubmit}>\n        <label className=\"TodoEditor__textarea-label\">\n          <TextField\n            className=\"TodoEditor__textarea\"\n            value={this.state.message}\n            onChange={this.handleChange}\n            id=\"outlined-multiline-static\"\n            label=\"Todo text\"\n            multiline\n            rows={2}\n            // defaultValue=\"Default Value\"\n            variant=\"outlined\"\n          />\n        </label>\n        <Button\n          className=\"TodoEditor__btn\"\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n        >\n          Submit\n        </Button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: text => dispatch(todosOperations.addTodo(text)),\n});\n\nexport default connect(null, mapDispatchToProps)(TodoEditor);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { changeFilter, todosSelectors } from '../../redux/todos';\nimport { TextField } from '@material-ui/core';\nimport './TodosStyles.scss';\n\nconst TodoFilter = ({ value, onChange }) => {\n  return (\n    <label className=\"TodoFilter-label\">\n      <TextField\n        type=\"text\"\n        className=\"TodoInput\"\n        value={value}\n        onChange={onChange}\n        id=\"outlined-basic\"\n        label=\"Filter by name\"\n        // variant=\"outlined\"\n      />\n    </label>\n  );\n};\n\nconst mapStateToProps = state => ({\n  value: todosSelectors.getFilter(state),\n});\n\nconst mapDispatchtoProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchtoProps)(TodoFilter);\n","// Reused Modal\nimport { Component } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport \"./Modal.scss\";\n\nconst reusedModalRoot = document.querySelector(\"#modal-root\");\n\nexport default class Modal extends Component {\n  // addEventListener keydown\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  // removeEventListener keydown\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  // Close by ESC\n  handleKeyDown = (e) => {\n    e.code === \"Escape\" && this.props.onClose();\n  };\n\n  // Close by Backdrop\n  handleBackdropClick = (e) => {\n    e.currentTarget === e.target && this.props.onClose();\n  };\n\n  render() {\n    return createPortal(\n      <div className=\"Modal__backdrop\" onClick={this.handleBackdropClick}>\n        <div className=\"Modal__content\">{this.props.children}</div>\n      </div>,\n      reusedModalRoot\n    );\n  }\n}\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\n// import todosOperations from '../../redux/todos/todos-operations';\n// import todosSelectors from '../../redux/todos/todos-selectors';\nimport { todosSelectors, todosOperations } from '../../redux/todos';\nimport Stats from './TodoStats';\nimport TodoList from './TodoList.container';\nimport TodoEditor from './TodoEditor';\nimport TodoFilter from './TodoFilter';\nimport { Button, IconButton } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Modal from '../Modal';\nimport './TodosStyles.scss';\n\nclass Todos extends Component {\n  state = {\n    showModal: false,\n  };\n\n  componentDidMount() {\n    this.props.fetchTodos();\n  }\n\n  toggleModal = () => {\n    this.setState(({ showModal }) => ({\n      showModal: !showModal,\n    }));\n  };\n\n  render() {\n    const { showModal } = this.state;\n\n    return (\n      <>\n        <Stats />\n        <Button\n          className=\"ModaOpen__btn\"\n          onClick={this.toggleModal}\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"button\"\n        >\n          + Add Todo\n        </Button>\n        {showModal && (\n          <Modal onClose={this.toggleModal}>\n            <span className=\"ModaClose__btn-wrap\">\n              <IconButton\n                className=\"ModaClose__btn\"\n                onClick={this.toggleModal}\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n              >\n                <CloseIcon />\n              </IconButton>\n            </span>\n            <TodoEditor onCloseModal={this.toggleModal} />\n          </Modal>\n        )}\n\n        <TodoFilter />\n        <TodoList />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingTodos: todosSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchTodos: () => dispatch(todosOperations.fetchTodos),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todos);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport shortid from 'shortid';\nimport Todos from './components/Todos';\nimport './components/Todos/TodosStyles.scss';\n\nconst App = ({ isLoadingTodos }) => {\n  return (\n    <section className=\"section\">\n      <div className=\"container\">\n        <h1>\n          Todos View Redux\n          {isLoadingTodos && <span className=\"Loading\"> Loading...</span>}\n        </h1>\n        <Todos />\n\n        <ul className=\"UseList\">\n          <li>use React - Prop Types</li>\n          <li>use ESLint</li>\n          <li>use Prettier</li>\n          <li>use gh-pages</li>\n          <li>use Modern normalize</li>\n          <li>use Node Sass</li>\n          <li>use React JSS</li>\n          <li>use Redux</li>\n          <li>use React Redux</li>\n          <li>use Redux Devtools Extension</li>\n          <li>use Material-UI</li>\n          <li>use axios</li>\n          <li>use Classnames</li>\n          <li>use react-router-dom</li>\n          <li>use shortid - id: {shortid.generate()}</li>\n          <li>use Redux Toolkit</li>\n          <li>use Logger for Redux</li>\n          <li>use Redux Persist</li>\n          <li>use JSON Server</li>\n          <li>use Reselect (from Toolkit)</li>\n        </ul>\n      </div>\n    </section>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isLoadingTodos: state.todos.loading,\n});\n\nexport default connect(mapStateToProps, null)(App);\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport logger from 'redux-logger';\nimport { todosReducer } from './todos';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    todos: todosReducer,\n  },\n  middleware, // logger\n  devTools: process.env.NODE_ENV !== 'production', // hide Devtools\n});\n\n// const persistor = persistStore(store);\n\nexport default store;\n\n/* ================================================\n// ** localStorage (completed module)\n\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\nimport todosReducer from './todos/todos-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\n// localStorage\nconst todosPersistConfig = {\n  key: 'todos',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: {\n    todos: persistReducer(todosPersistConfig, todosReducer),\n  },\n  middleware, // logger\n  devTools: process.env.NODE_ENV !== 'production', // hide Devtools\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor }; // eslint-disable-line\n\n// ------------------------------------------------- */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles/base.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={'Loading...'} persistor={store.persistor}> */}\n      <Router>\n        <App />\n      </Router>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}