{"version":3,"sources":["redux/todos/todos-actions.js","redux/todos/todos-operations.js","redux/todos/todos-selectors.js","redux/todos/todos-reducer.js","components/Todos/TodoStats.jsx","components/Todos/TodoItem.jsx","components/Todos/TodoList.jsx","components/Todos/TodoEditor.jsx","components/Todos/TodoFilter.jsx","components/Modal/Modal.jsx","components/Todos/Todos.jsx","App.js","redux/store.js","index.js"],"names":["fetchTodosRequest","createAction","fetchTodosSuccess","fetchTodosError","addTodoRequest","addTodoSuccess","addTodoError","deleteTodoRequest","deleteTodoSuccess","deleteTodoError","toggleCompletedRequest","toggleCompletedSuccess","toggleCompletedError","changeFilter","axios","defaults","baseURL","fetchTodos","dispatch","a","get","data","addTodo","text","todo","completed","post","deleteTodo","id","delete","toggleCompleted","update","patch","getFilter","state","todos","filter","getAllTodos","items","getCompletedTodoCount","createSelector","reduce","total","getVisibleTodos","normalizedFilter","toLowerCase","includes","getLoading","loading","getTotalTodoCount","length","createReducer","_","payload","map","combineReducers","Stats","useSelector","todosSelectors","TodoItem","useDispatch","useCallback","todosOperations","completeTodo","Checkbox","type","className","checked","onChange","color","inputProps","IconButton","onClick","disabled","aria-label","component","TodoList","classNames","TodoEditor","onCloseModal","useState","message","setMessage","inputRef","useRef","useEffect","current","focus","handleChange","e","currentTarget","value","handleSubmit","preventDefault","alert","onSubmit","TextField","label","multiline","rows","variant","Button","TodoFilter","filterRef","target","reusedModalRoot","document","querySelector","Modal","children","onClose","handleKeyDown","code","window","addEventListener","removeEventListener","createPortal","Todos","showModal","setShowModal","toggleModal","prevShowModal","App","isLoadingTodos","todoSelectors","shortid","generate","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","todosReducer","devTools","process","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.be1be702.chunk.js","sourcesContent":["// import axios from 'axios';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const fetchTodosRequest = createAction('todos/fetchTodosRequest');\nexport const fetchTodosSuccess = createAction('todos/fetchTodosSuccess');\nexport const fetchTodosError = createAction('todo/fetchTodosError');\n\nexport const addTodoRequest = createAction('todos/addTodoRequest');\nexport const addTodoSuccess = createAction('todos/addTodoSuccess');\nexport const addTodoError = createAction('todo/addTodoError');\n\nexport const deleteTodoRequest = createAction('todos/deleteTodoRequest');\nexport const deleteTodoSuccess = createAction('todos/deleteTodoSuccess');\nexport const deleteTodoError = createAction('todo/deleteTodoError');\n\nexport const toggleCompletedRequest = createAction(\n  'todos/toggleCompletedRequest',\n);\nexport const toggleCompletedSuccess = createAction(\n  'todos/toggleCompletedSuccess',\n);\nexport const toggleCompletedError = createAction('todo/toggleCompletedError');\n\nexport const deleteTodo = createAction('todos/delete');\nexport const changeFilter = createAction('todos/changeFilter');\nexport const toggleCompleted = createAction('todos/toggleCompleted');\n\n/* eslint-disable */\n// export default {\n// addTodoRequest,\n// addTodoSuccess,\n// addTodoError,\n// addTodo,\n// deleteTodo,\n// changeFilter,\n// toggleCompleted,\n// };\n\n/* ================================================\n// ** Sync (completed module)\n\nimport shortid from 'shortid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addTodo = createAction('todos/add', text => ({\n  payload: {\n    id: shortid.generate(),\n    text,\n    completed: false,\n  },\n}));\nconst deleteTodo = createAction('todos/delete');\nconst changeFilter = createAction('todos/changeFilter');\nconst toggleCompleted = createAction('todos/toggleCompleted');\n\nexport default { addTodo, deleteTodo, changeFilter, toggleCompleted }; // eslint-disable-line\n\n// ------------------------------------------------- */\n","import axios from 'axios';\nimport {\n  fetchTodosRequest,\n  fetchTodosSuccess,\n  fetchTodosError,\n  addTodoRequest,\n  addTodoSuccess,\n  addTodoError,\n  deleteTodoRequest,\n  deleteTodoSuccess,\n  deleteTodoError,\n  toggleCompletedRequest,\n  toggleCompletedSuccess,\n  toggleCompletedError,\n} from './todos-actions';\n\naxios.defaults.baseURL = 'http://localhost:2222';\n\n// Fetch Todos\nconst fetchTodos = async dispatch => {\n  dispatch(fetchTodosRequest());\n\n  try {\n    const { data } = await axios.get('/todos');\n    dispatch(fetchTodosSuccess(data));\n  } catch (error) {\n    dispatch(fetchTodosError(error));\n  }\n};\n\n// Add Todo\nconst addTodo = text => async dispatch => {\n  const todo = {\n    text,\n    completed: false,\n  };\n\n  dispatch(addTodoRequest());\n\n  try {\n    const { data } = await axios.post('/todos', todo);\n    dispatch(addTodoSuccess(data));\n  } catch (error) {\n    dispatch(addTodoError(error));\n  }\n};\n\n// Delete Todo\nconst deleteTodo = id => async dispatch => {\n  dispatch(deleteTodoRequest());\n\n  try {\n    await axios.delete(`/todos/${id}`);\n    dispatch(deleteTodoSuccess(id));\n  } catch (error) {\n    dispatch(deleteTodoError(error));\n  }\n};\n\n// Toggle Completed\nconst toggleCompleted = ({ id, completed }) => async dispatch => {\n  const update = { completed };\n\n  dispatch(toggleCompletedRequest());\n\n  try {\n    const { data } = await axios.patch(`/todos/${id}`, update);\n    dispatch(toggleCompletedSuccess(data));\n  } catch (error) {\n    toggleCompletedError(error);\n  }\n};\n\n/* eslint-disable */\nexport default { fetchTodos, addTodo, deleteTodo, toggleCompleted };\n\n/* ===============================================\n// ** Async axios\n\nimport axios from 'axios';\nimport {\n  fetchTodosRequest,\n  fetchTodosSuccess,\n  fetchTodosError,\n  addTodoRequest,\n  addTodoSuccess,\n  addTodoError,\n  deleteTodoRequest,\n  deleteTodoSuccess,\n  deleteTodoError,\n  toggleCompletedRequest,\n  toggleCompletedSuccess,\n  toggleCompletedError,\n} from './todos-actions';\n\naxios.defaults.baseURL = 'http://localhost:2222';\n\n// Fetch Todos\nconst fetchTodos = dispatch => {\n  dispatch(fetchTodosRequest());\n\n  axios\n    .get('/todos')\n    .then(({ data }) => dispatch(fetchTodosSuccess(data)))\n    .catch(error => dispatch(fetchTodosError(error)));\n};\n\n// Add Todo\nconst addTodo = text => dispatch => {\n  const todo = {\n    text,\n    completed: false,\n  };\n\n  // Start (sync)\n  dispatch(addTodoRequest());\n\n  axios\n    .post('/todos', todo)\n    .then(({ data }) => dispatch(addTodoSuccess(data)))\n    .catch(error => dispatch(addTodoError(error)));\n};\n\n// Delete Todo\nconst deleteTodo = todoId => dispatch => {\n  dispatch(deleteTodoRequest());\n\n  axios\n    .delete(`/todos/${todoId}`)\n    .then(() => dispatch(deleteTodoSuccess(todoId)))\n    .catch(error => dispatch(deleteTodoError(error)));\n};\n\n// Toggle Completed\nconst toggleCompleted = ({ id, completed }) => dispatch => {\n  const update = { completed };\n\n  dispatch(toggleCompletedRequest());\n\n  axios\n    .patch(`/todos/${id}`, update)\n    .then(({ data }) => dispatch(toggleCompletedSuccess(data)))\n    .catch(error => dispatch(toggleCompletedError(error)));\n};\n\nexport default { fetchTodos, addTodo, deleteTodo, toggleCompleted };\n----------------------------------------------- */\n","import { createSelector } from '@reduxjs/toolkit';\n\n// Простые селекторы\nconst getLoading = state => state.todos.loading;\nconst getFilter = state => state.todos.filter;\nconst getAllTodos = state => state.todos.items;\n\n// Составные селекторы (композитные)\nconst getTotalTodoCount = state => {\n  const todos = getAllTodos(state);\n\n  return todos.length;\n};\n\nconst getCompletedTodoCount = createSelector([getAllTodos], todos => {\n  // console.log('Высчитывает новое кол-во Completed Todos ');\n  return todos.reduce((total, todo) => (todo.completed ? total + 1 : total), 0);\n});\n\nconst getVisibleTodos = createSelector(\n  [getAllTodos, getFilter],\n  (todos, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    // console.log('Составлят новый массив видимых Todos');\n    return todos.filter(({ text }) =>\n      text.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\n/* eslint-disable */\nexport default {\n  getLoading,\n  getFilter,\n  getAllTodos,\n  getTotalTodoCount,\n  getCompletedTodoCount,\n  getVisibleTodos,\n};\n\n/* ==============================================\n// ** Before memoization \n    \n// Составные селекторы (композитные)\n\nconst getCompletedTodosCount = state => {\n  const todos = getAllTodos(state);\n\n  return todos.reduce((total, todo) => (todo.completed ? total + 1 : total), 0);\n};\n\nconst getVisibleTodos = state => {\n  const todos = getAllTodos(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return todos.filter(({ text }) =>\n    text.toLowerCase().includes(normalizedFilter),\n  );\n};\n\n---------------------------------------------- */\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n// import actions from './todos-actions';\nimport {\n  fetchTodosRequest,\n  fetchTodosSuccess,\n  fetchTodosError,\n  addTodoRequest,\n  addTodoSuccess,\n  addTodoError,\n  deleteTodoRequest,\n  deleteTodoSuccess,\n  deleteTodoError,\n  changeFilter,\n  toggleCompletedRequest,\n  toggleCompletedSuccess,\n  toggleCompletedError,\n} from './todos-actions';\n\n// Items\nconst items = createReducer([], {\n  [fetchTodosSuccess]: (_, { payload }) => payload,\n  [addTodoSuccess]: (state, { payload }) => [payload, ...state],\n  [deleteTodoSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n  [toggleCompletedSuccess]: (state, { payload }) =>\n    state.map(todo => (todo.id === payload.id ? payload : todo)),\n});\n\n// Loading\nconst loading = createReducer(false, {\n  [fetchTodosRequest]: () => true,\n  [fetchTodosSuccess]: () => false,\n  [fetchTodosError]: () => false,\n  [addTodoRequest]: () => true,\n  [addTodoSuccess]: () => false,\n  [addTodoError]: () => false,\n  [deleteTodoRequest]: () => true,\n  [deleteTodoSuccess]: () => false,\n  [deleteTodoError]: () => false,\n  [toggleCompletedRequest]: () => true,\n  [toggleCompletedSuccess]: () => false,\n  [toggleCompletedError]: () => false,\n});\n\n// Filter\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({ items, filter, loading });\n\n/* ================================================\n// ** Sync (completed module)\n\nimport { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './todos-actions';\n\nconst items = createReducer([], {\n  [actions.addTodo]: (state, { payload }) => [...state, payload],\n  [actions.toggleCompleted]: (state, { payload }) =>\n    state.map(todo =>\n      todo.id === payload ? { ...todo, completed: !todo.completed } : todo,\n    ),\n  [actions.deleteTodo]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({ items, filter });\n\n// ------------------------------------------------- */\n","import { useSelector } from 'react-redux';\nimport { todosSelectors } from '../../redux/todos';\n\nexport default function Stats() {\n  const total = useSelector(todosSelectors.getTotalTodoCount);\n  const completed = useSelector(todosSelectors.getCompletedTodoCount);\n\n  return (\n    <div>\n      <p>\n        <span>Total: {total}</span>\n      </p>\n      <p>\n        <span>Completed: {completed}</span>\n      </p>\n    </div>\n  );\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { todosOperations } from '../../redux/todos';\nimport { IconButton } from '@material-ui/core';\nimport DeleteTwoToneIcon from '@material-ui/icons/DeleteTwoTone';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport './TodosStyles.scss';\n\nconst TodoItem = ({ id, text, completed }) => {\n  const dispatch = useDispatch();\n\n  // useCallback\n  const deleteTodo = useCallback(\n    () => dispatch(todosOperations.deleteTodo(id)),\n    [dispatch, id],\n  );\n\n  // useCallback\n  const completeTodo = useCallback(\n    () =>\n      dispatch(\n        todosOperations.toggleCompleted({\n          id,\n          completed: !completed,\n        }),\n      ),\n    [dispatch, id, completed],\n  );\n\n  return (\n    <>\n      <label>\n        <Checkbox\n          type=\"checkbox\"\n          className=\"TodoList__checkbox\"\n          checked={completed}\n          onChange={completeTodo}\n          color=\"primary\"\n          inputProps={{ 'aria-label': 'secondary checkbox' }}\n        />\n      </label>\n      <p className=\"TodoList__text\">{text}</p>\n      <IconButton\n        type=\"button\"\n        className=\"TodoList__btn\"\n        onClick={deleteTodo}\n        disabled={!completed}\n        color=\"primary\"\n        aria-label=\"delete todo\"\n        component=\"span\"\n      >\n        <DeleteTwoToneIcon />\n      </IconButton>\n    </>\n  );\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport TodoItem from './TodoItem';\nimport { todosSelectors } from '../../redux/todos';\nimport './TodosStyles.scss';\n\nconst TodoList = () => {\n  const todos = useSelector(todosSelectors.getVisibleTodos);\n\n  return (\n    <ul className=\"TodoList\">\n      {todos.map(({ id, text, completed }) => {\n        return (\n          <li\n            key={id}\n            className={classNames('TodoList__item', {\n              'TodoList__item--completed': completed,\n            })}\n          >\n            <TodoItem id={id} text={text} completed={completed} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default TodoList;\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport todosOperations from '../../redux/todos/todos-operations';\nimport { Button, TextField } from '@material-ui/core';\n\nexport default function TodoEditor({ onCloseModal }) {\n  const [message, setMessage] = useState('');\n  const dispatch = useDispatch();\n  const inputRef = useRef();\n\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  // useCallback\n  const handleChange = useCallback(e => {\n    setMessage(e.currentTarget.value);\n  }, []);\n\n  // useCallback\n  const handleSubmit = useCallback(\n    e => {\n      e.preventDefault();\n\n      if (message === '') {\n        alert('Заполни текст Todo');\n      }\n      dispatch(todosOperations.addTodo(message));\n      onCloseModal();\n      setMessage('');\n    },\n    [dispatch, message, onCloseModal],\n  );\n\n  return (\n    <form className=\"TodoEditor\" onSubmit={handleSubmit}>\n      <label className=\"TodoEditor__textarea-label\">\n        <TextField\n          className=\"TodoEditor__textarea\"\n          value={message}\n          onChange={handleChange}\n          id=\"outlined-multiline-static\"\n          label=\"Todo text\"\n          multiline\n          rows={2}\n          variant=\"outlined\"\n          inputRef={inputRef}\n        />\n      </label>\n      <Button\n        className=\"TodoEditor__btn\"\n        variant=\"contained\"\n        color=\"primary\"\n        type=\"submit\"\n      >\n        Submit\n      </Button>\n    </form>\n  );\n}\n","import React, { useEffect, useCallback, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter, todosSelectors } from '../../redux/todos';\nimport { TextField } from '@material-ui/core';\nimport './TodosStyles.scss';\n\nexport default function TodoFilter() {\n  const dispatch = useDispatch();\n  const filterRef = useRef();\n  const value = useSelector(todosSelectors.getFilter);\n  const onChange = useCallback(e => dispatch(changeFilter(e.target.value)), [\n    dispatch,\n  ]);\n\n  useEffect(() => {\n    filterRef.current.focus();\n  });\n\n  return (\n    <label className=\"TodoFilter-label\">\n      <TextField\n        type=\"text\"\n        className=\"TodoInput\"\n        value={value}\n        onChange={onChange}\n        id=\"outlined-basic\"\n        label=\"Filter by name\"\n        inputRef={filterRef}\n      />\n    </label>\n  );\n}\n","// Reused Modal\nimport React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport './Modal.scss';\n\nconst reusedModalRoot = document.querySelector('#modal-root');\n\nexport default function Modal({ children, onClose }) {\n  // Close by ESC\n  useEffect(() => {\n    const handleKeyDown = e => {\n      e.code === 'Escape' && onClose();\n    };\n\n    // componentDidMount()\n    window.addEventListener('keydown', handleKeyDown);\n\n    // componentWillUnmount()\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClose]);\n\n  // Close by Backdrop\n  const handleBackdropClick = e => {\n    e.currentTarget === e.target && onClose();\n  };\n\n  return createPortal(\n    <div className=\"Modal__backdrop\" onClick={handleBackdropClick}>\n      <div className=\"Modal__content\">{children}</div>\n    </div>,\n    reusedModalRoot,\n  );\n}\n","import { useState, useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { todosOperations } from '../../redux/todos';\nimport Stats from './TodoStats';\nimport TodoList from './TodoList';\nimport TodoEditor from './TodoEditor';\nimport TodoFilter from './TodoFilter';\nimport { Button, IconButton } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Modal from '../Modal';\nimport './TodosStyles.scss';\n\nexport default function Todos() {\n  const [showModal, setShowModal] = useState(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(todosOperations.fetchTodos);\n  }, [dispatch]);\n\n  const toggleModal = useCallback(() => {\n    setShowModal(prevShowModal => !prevShowModal);\n  }, []);\n\n  return (\n    <>\n      <Stats />\n      <Button\n        className=\"ModaOpen__btn\"\n        onClick={toggleModal}\n        variant=\"contained\"\n        color=\"primary\"\n        type=\"button\"\n      >\n        + Add Todo\n      </Button>\n      {showModal && (\n        <Modal onClose={toggleModal}>\n          <span className=\"ModaClose__btn-wrap\">\n            <IconButton\n              className=\"ModaClose__btn\"\n              onClick={toggleModal}\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n            >\n              <CloseIcon />\n            </IconButton>\n          </span>\n          <TodoEditor onCloseModal={toggleModal} />\n        </Modal>\n      )}\n\n      <TodoFilter />\n      <TodoList />\n    </>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport shortid from 'shortid';\nimport Todos from './components/Todos';\nimport todoSelectors from './redux/todos/todos-selectors';\nimport './components/Todos/TodosStyles.scss';\n\nexport default function App() {\n  const isLoadingTodos = useSelector(todoSelectors.getLoading);\n\n  return (\n    <section className=\"section\">\n      <div className=\"container\">\n        <h1>\n          Todos View Redux\n          {isLoadingTodos && <span className=\"Loading\"> Loading...</span>}\n        </h1>\n        <Todos />\n\n        <ul className=\"UseList\">\n          <li>Hooks:</li>\n          <li>useState</li>\n          <li>useEffect</li>\n          <li>useRef</li>\n          <li>useCallback</li>\n        </ul>\n\n        <ul className=\"UseList\">\n          <li>use React - Prop Types</li>\n          <li>use ESLint</li>\n          <li>use Prettier</li>\n          <li>use gh-pages</li>\n          <li>use Modern normalize</li>\n          <li>use Node Sass</li>\n          <li>use React JSS</li>\n          <li>use Redux</li>\n          <li>use React Redux</li>\n          <li>use Redux Devtools Extension</li>\n          <li>use Material-UI</li>\n          <li>use axios</li>\n          <li>use Classnames</li>\n          <li>use react-router-dom</li>\n          <li>use shortid - id: {shortid.generate()}</li>\n          <li>use Redux Toolkit</li>\n          <li>use Logger for Redux</li>\n          <li>use Redux Persist</li>\n          <li>use JSON Server</li>\n          <li>use Reselect (from Toolkit)</li>\n        </ul>\n      </div>\n    </section>\n  );\n}\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n// import logger from 'redux-logger';\nimport { todosReducer } from './todos';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  // logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    todos: todosReducer,\n  },\n  middleware, // logger\n  devTools: process.env.NODE_ENV !== 'production', // hide Devtools\n});\n\n// const persistor = persistStore(store);\n\nexport default store;\n\n/* ================================================\n// ** localStorage (completed module)\n\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\nimport todosReducer from './todos/todos-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\n// localStorage\nconst todosPersistConfig = {\n  key: 'todos',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: {\n    todos: persistReducer(todosPersistConfig, todosReducer),\n  },\n  middleware, // logger\n  devTools: process.env.NODE_ENV !== 'production', // hide Devtools\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor }; // eslint-disable-line\n\n// ------------------------------------------------- */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles/base.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={'Loading...'} persistor={store.persistor}> */}\n      <Router>\n        <App />\n      </Router>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}