{"version":3,"sources":["redux/todos/todos-actions.js","redux/todos/todos-operations.js","components/Todos/TodoStats.jsx","components/Todos/TodoItem.jsx","components/Todos/TodoList.jsx","components/Todos/TodoList.container.js","components/Todos/TodoEditor.jsx","components/Todos/TodoFilter.jsx","components/Modal/Modal.jsx","components/Todos/Todos.jsx","App.js","redux/todos/todos-reducer.js","redux/store.js","index.js"],"names":["fetchTodosRequest","createAction","fetchTodosSuccess","fetchTodosError","addTodoRequest","addTodoSuccess","addTodoError","deleteTodoRequest","deleteTodoSuccess","deleteTodoError","toggleCompletedRequest","toggleCompletedSuccess","toggleCompletedError","changeFilter","axios","defaults","baseURL","dispatch","get","then","data","catch","error","text","todo","completed","post","todoId","delete","id","update","patch","connect","state","total","todos","items","length","reduce","TodoItem","onToggleCompleted","onDelete","Checkbox","type","className","checked","onChange","color","inputProps","IconButton","onClick","disabled","aria-label","component","TodoList","onDeleteTodo","map","classNames","getVisibleTodos","allTodos","filter","normalizedFilter","toLowerCase","includes","todosOperations","TodoEditor","message","handleChange","e","setState","currentTarget","value","handleSubmit","preventDefault","props","onSubmit","onCloseModal","alert","window","addEventListener","this","handleKeyDown","removeEventListener","TextField","label","multiline","rows","variant","Button","Component","target","reusedModalRoot","document","querySelector","Modal","code","onClose","handleBackdropClick","createPortal","children","Todos","showModal","toggleModal","fetchTodos","isLoadingTodos","loading","shortid","generate","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","todosReducer","devTools","process","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.efb0221d.chunk.js","sourcesContent":["// import axios from 'axios';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const fetchTodosRequest = createAction('todos/fetchTodosRequest');\nexport const fetchTodosSuccess = createAction('todos/fetchTodosSuccess');\nexport const fetchTodosError = createAction('todo/fetchTodosError');\n\nexport const addTodoRequest = createAction('todos/addTodoRequest');\nexport const addTodoSuccess = createAction('todos/addTodoSuccess');\nexport const addTodoError = createAction('todo/addTodoError');\n\nexport const deleteTodoRequest = createAction('todos/deleteTodoRequest');\nexport const deleteTodoSuccess = createAction('todos/deleteTodoSuccess');\nexport const deleteTodoError = createAction('todo/deleteTodoError');\n\nexport const toggleCompletedRequest = createAction(\n  'todos/toggleCompletedRequest',\n);\nexport const toggleCompletedSuccess = createAction(\n  'todos/toggleCompletedSuccess',\n);\nexport const toggleCompletedError = createAction('todo/toggleCompletedError');\n\nexport const deleteTodo = createAction('todos/delete');\nexport const changeFilter = createAction('todos/changeFilter');\nexport const toggleCompleted = createAction('todos/toggleCompleted');\n\n/* eslint-disable */\n// export default {\n// addTodoRequest,\n// addTodoSuccess,\n// addTodoError,\n// addTodo,\n// deleteTodo,\n// changeFilter,\n// toggleCompleted,\n// };\n\n/* ================================================\n// ** Sync (completed module)\n\nimport shortid from 'shortid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addTodo = createAction('todos/add', text => ({\n  payload: {\n    id: shortid.generate(),\n    text,\n    completed: false,\n  },\n}));\nconst deleteTodo = createAction('todos/delete');\nconst changeFilter = createAction('todos/changeFilter');\nconst toggleCompleted = createAction('todos/toggleCompleted');\n\nexport default { addTodo, deleteTodo, changeFilter, toggleCompleted }; // eslint-disable-line\n\n// ------------------------------------------------- */\n","import axios from 'axios';\nimport {\n  fetchTodosRequest,\n  fetchTodosSuccess,\n  fetchTodosError,\n  addTodoRequest,\n  addTodoSuccess,\n  addTodoError,\n  deleteTodoRequest,\n  deleteTodoSuccess,\n  deleteTodoError,\n  toggleCompletedRequest,\n  toggleCompletedSuccess,\n  toggleCompletedError,\n} from './todos-actions';\n\naxios.defaults.baseURL = 'http://localhost:2222';\n\nconst fetchTodos = dispatch => {\n  dispatch(fetchTodosRequest());\n\n  axios\n    .get('/todos')\n    .then(({ data }) => dispatch(fetchTodosSuccess(data)))\n    .catch(error => dispatch(fetchTodosError(error)));\n};\n\n// Add Todo\nconst addTodo = text => dispatch => {\n  const todo = {\n    text,\n    completed: false,\n  };\n\n  // Start (sync)\n  dispatch(addTodoRequest());\n\n  axios\n    .post('/todos', todo)\n    .then(({ data }) => dispatch(addTodoSuccess(data)))\n    .catch(error => dispatch(addTodoError(error)));\n};\n\n// Delete Todo\nconst deleteTodo = todoId => dispatch => {\n  dispatch(deleteTodoRequest());\n\n  axios\n    .delete(`/todos/${todoId}`)\n    .then(() => dispatch(deleteTodoSuccess(todoId)))\n    .catch(error => dispatch(deleteTodoError(error)));\n};\n\n// Toggle Completed\nconst toggleCompleted = ({ id, completed }) => dispatch => {\n  const update = { completed };\n\n  dispatch(toggleCompletedRequest());\n\n  axios\n    .patch(`/todos/${id}`, update)\n    .then(({ data }) => dispatch(toggleCompletedSuccess(data)))\n    .catch(error => dispatch(toggleCompletedError(error)));\n};\n\n/* eslint-disable */\nexport default { fetchTodos, addTodo, deleteTodo, toggleCompleted };\n","import { connect } from 'react-redux';\nimport React from 'react';\n\nconst Stats = ({ total, completed }) => {\n  return (\n    <div>\n      <p>\n        <span>Total: {total}</span>\n      </p>\n      <p>\n        <span>Completed: {completed}</span>\n      </p>\n    </div>\n  );\n};\n\nconst getCompletedCount = todos =>\n  todos.reduce((total, todo) => (todo.completed ? total + 1 : total), 0);\n\nconst mapStateToProps = state => ({\n  total: state.todos.items.length,\n  completed: getCompletedCount(state.todos.items),\n});\n\nexport default connect(mapStateToProps)(Stats);\n","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport DeleteTwoToneIcon from '@material-ui/icons/DeleteTwoTone';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport './TodosStyles.scss';\n\nconst TodoItem = ({ text, completed, onToggleCompleted, onDelete }) => {\n  return (\n    <>\n      <label>\n        <Checkbox\n          type=\"checkbox\"\n          className=\"TodoList__checkbox\"\n          checked={completed}\n          onChange={onToggleCompleted}\n          color=\"primary\"\n          inputProps={{ 'aria-label': 'secondary checkbox' }}\n        />\n      </label>\n      <p className=\"TodoList__text\">{text}</p>\n      <IconButton\n        type=\"button\"\n        className=\"TodoList__btn\"\n        onClick={onDelete}\n        disabled={!completed}\n        color=\"primary\"\n        aria-label=\"delete todo\"\n        component=\"span\"\n      >\n        <DeleteTwoToneIcon />\n      </IconButton>\n    </>\n  );\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport classNames from 'classnames';\nimport TodoItem from './TodoItem';\nimport './TodosStyles.scss';\n\nconst TodoList = ({ todos, onDeleteTodo, onToggleCompleted }) => {\n  return (\n    <ul className=\"TodoList\">\n      {todos.map(({ id, text, completed }) => {\n        return (\n          <li\n            key={id}\n            className={classNames('TodoList__item', {\n              'TodoList__item--completed': completed,\n            })}\n          >\n            <TodoItem\n              text={text}\n              completed={completed}\n              onToggleCompleted={() =>\n                onToggleCompleted({ id, completed: !completed })\n              }\n              onDelete={() => onDeleteTodo(id)}\n            />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default TodoList;\n","import { connect } from 'react-redux';\nimport todosOperations from '../../redux/todos/todos-operations';\nimport TodoList from './TodoList';\n\nconst getVisibleTodos = (allTodos, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allTodos.filter(({ text }) =>\n    text.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst mapStateToProps = ({ todos: { items, filter } }) => ({\n  todos: getVisibleTodos(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteTodo: id => dispatch(todosOperations.deleteTodo(id)),\n  onToggleCompleted: id => dispatch(todosOperations.toggleCompleted(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport todosOperations from '../../redux/todos/todos-operations';\nimport { Button, TextField } from '@material-ui/core';\n\nclass TodoEditor extends Component {\n  state = {\n    message: '',\n  };\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  handleChange = e => {\n    this.setState({ message: e.currentTarget.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    if (this.state.message !== '') {\n      this.props.onSubmit(this.state.message);\n      this.props.onCloseModal();\n      this.setState({ message: '' });\n      return;\n    }\n\n    alert('Заполни текст Todo');\n  };\n\n  render() {\n    return (\n      <form className=\"TodoEditor\" onSubmit={this.handleSubmit}>\n        <label className=\"TodoEditor__textarea-label\">\n          <TextField\n            className=\"TodoEditor__textarea\"\n            value={this.state.message}\n            onChange={this.handleChange}\n            id=\"outlined-multiline-static\"\n            label=\"Todo text\"\n            multiline\n            rows={2}\n            // defaultValue=\"Default Value\"\n            variant=\"outlined\"\n          />\n        </label>\n        <Button\n          className=\"TodoEditor__btn\"\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n        >\n          Submit\n        </Button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: text => dispatch(todosOperations.addTodo(text)),\n});\n\nexport default connect(null, mapDispatchToProps)(TodoEditor);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { changeFilter } from '../../redux/todos/todos-actions';\nimport { TextField } from '@material-ui/core';\nimport './TodosStyles.scss';\n\nconst TodoFilter = ({ value, onChange }) => {\n  return (\n    <label className=\"TodoFilter-label\">\n      <TextField\n        type=\"text\"\n        className=\"TodoInput\"\n        value={value}\n        onChange={onChange}\n        id=\"outlined-basic\"\n        label=\"Filter by name\"\n        // variant=\"outlined\"\n      />\n    </label>\n  );\n};\n\nconst mapStateToProps = state => ({\n  value: state.todos.filter,\n});\n\nconst mapDispatchtoProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchtoProps)(TodoFilter);\n","// Reused Modal\nimport { Component } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport \"./Modal.scss\";\n\nconst reusedModalRoot = document.querySelector(\"#modal-root\");\n\nexport default class Modal extends Component {\n  // addEventListener keydown\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  // removeEventListener keydown\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  // Close by ESC\n  handleKeyDown = (e) => {\n    e.code === \"Escape\" && this.props.onClose();\n  };\n\n  // Close by Backdrop\n  handleBackdropClick = (e) => {\n    e.currentTarget === e.target && this.props.onClose();\n  };\n\n  render() {\n    return createPortal(\n      <div className=\"Modal__backdrop\" onClick={this.handleBackdropClick}>\n        <div className=\"Modal__content\">{this.props.children}</div>\n      </div>,\n      reusedModalRoot\n    );\n  }\n}\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport todosOperations from '../../redux/todos/todos-operations';\nimport Stats from './TodoStats';\nimport TodoList from './TodoList.container';\nimport TodoEditor from './TodoEditor';\nimport TodoFilter from './TodoFilter';\nimport { Button, IconButton } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Modal from '../Modal';\nimport './TodosStyles.scss';\n\nclass Todos extends Component {\n  state = {\n    showModal: false,\n  };\n\n  componentDidMount() {\n    this.props.fetchTodos();\n  }\n\n  toggleModal = () => {\n    this.setState(({ showModal }) => ({\n      showModal: !showModal,\n    }));\n  };\n\n  render() {\n    const { showModal } = this.state;\n\n    return (\n      <>\n        <Stats />\n        <Button\n          className=\"ModaOpen__btn\"\n          onClick={this.toggleModal}\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"button\"\n        >\n          + Add Todo\n        </Button>\n        {showModal && (\n          <Modal onClose={this.toggleModal}>\n            <span className=\"ModaClose__btn-wrap\">\n              <IconButton\n                className=\"ModaClose__btn\"\n                onClick={this.toggleModal}\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n              >\n                <CloseIcon />\n              </IconButton>\n            </span>\n            <TodoEditor onCloseModal={this.toggleModal} />\n          </Modal>\n        )}\n\n        <TodoFilter />\n        <TodoList />\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchTodos: () => dispatch(todosOperations.fetchTodos),\n});\n\nexport default connect(null, mapDispatchToProps)(Todos);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport shortid from 'shortid';\nimport Todos from './components/Todos';\nimport './components/Todos/TodosStyles.scss';\n\nconst App = ({ isLoadingTodos }) => {\n  return (\n    <section className=\"section\">\n      <div className=\"container\">\n        <h1>\n          Todos View Redux\n          {isLoadingTodos && <span className=\"Loading\"> Loading...</span>}\n        </h1>\n        <Todos />\n\n        <ul className=\"UseList\">\n          <li>use React - Prop Types</li>\n          <li>use ESLint</li>\n          <li>use Prettier</li>\n          <li>use gh-pages</li>\n          <li>use Modern normalize</li>\n          <li>use Node Sass</li>\n          <li>use React JSS</li>\n          <li>use Redux</li>\n          <li>use React Redux</li>\n          <li>use Redux Devtools Extension</li>\n          <li>use Material-UI</li>\n          <li>use axios</li>\n          <li>use Classnames</li>\n          <li>use react-router-dom</li>\n          <li>use shortid - id: {shortid.generate()}</li>\n          <li>use Redux Toolkit</li>\n          <li>use Logger for Redux</li>\n          <li>use Redux Persist</li>\n          <li>use JSON Server</li>\n        </ul>\n      </div>\n    </section>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isLoadingTodos: state.todos.loading,\n});\n\nexport default connect(mapStateToProps, null)(App);\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n// import actions from './todos-actions';\nimport {\n  fetchTodosRequest,\n  fetchTodosSuccess,\n  fetchTodosError,\n  addTodoRequest,\n  addTodoSuccess,\n  addTodoError,\n  deleteTodoRequest,\n  deleteTodoSuccess,\n  deleteTodoError,\n  changeFilter,\n  toggleCompletedRequest,\n  toggleCompletedSuccess,\n  toggleCompletedError,\n} from './todos-actions';\n\n// Items\nconst items = createReducer([], {\n  [fetchTodosSuccess]: (_, { payload }) => payload,\n  [addTodoSuccess]: (state, { payload }) => [...state, payload],\n  [deleteTodoSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n  [toggleCompletedSuccess]: (state, { payload }) =>\n    state.map(todo => (todo.id === payload.id ? payload : todo)),\n});\n\n// Loading\nconst loading = createReducer(false, {\n  [fetchTodosRequest]: () => true,\n  [fetchTodosSuccess]: () => false,\n  [fetchTodosError]: () => false,\n  [addTodoRequest]: () => true,\n  [addTodoSuccess]: () => false,\n  [addTodoError]: () => false,\n  [deleteTodoRequest]: () => true,\n  [deleteTodoSuccess]: () => false,\n  [deleteTodoError]: () => false,\n  [toggleCompletedRequest]: () => true,\n  [toggleCompletedSuccess]: () => false,\n  [toggleCompletedError]: () => false,\n});\n\n// Filter\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({ items, filter, loading });\n\n/* ================================================\n// ** Sync (completed module)\n\nimport { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './todos-actions';\n\nconst items = createReducer([], {\n  [actions.addTodo]: (state, { payload }) => [...state, payload],\n  [actions.toggleCompleted]: (state, { payload }) =>\n    state.map(todo =>\n      todo.id === payload ? { ...todo, completed: !todo.completed } : todo,\n    ),\n  [actions.deleteTodo]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({ items, filter });\n\n// ------------------------------------------------- */\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport logger from 'redux-logger';\nimport todosReducer from './todos/todos-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    todos: todosReducer,\n  },\n  middleware, // logger\n  devTools: process.env.NODE_ENV !== 'production', // hide Devtools\n});\n\n// const persistor = persistStore(store);\n\nexport default store;\n\n/* ================================================\n// ** localStorage (completed module)\n\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\nimport todosReducer from './todos/todos-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\n// localStorage\nconst todosPersistConfig = {\n  key: 'todos',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: {\n    todos: persistReducer(todosPersistConfig, todosReducer),\n  },\n  middleware, // logger\n  devTools: process.env.NODE_ENV !== 'production', // hide Devtools\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor }; // eslint-disable-line\n\n// ------------------------------------------------- */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles/base.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={'Loading...'} persistor={store.persistor}> */}\n      <Router>\n        <App />\n      </Router>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}